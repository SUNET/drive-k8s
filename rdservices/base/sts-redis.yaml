apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: customerrds
    app.kubernetes.io/name: redis
  name: redis
spec:
  podManagementPolicy: Parallel
  replicas: 6
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: customerrds
      app.kubernetes.io/name: redis
  serviceName: redis-headless
  template:
    metadata:
      annotations:
        checksum/config: 6c65232a0113d9ae0df04f114a76e41ad2c42b52a799cbe135988a185d7ceb5a
        checksum/scripts: c45d2bcd1e57d333a2fb4cba241953c83f316b5eed5e36003db6604fd348a055
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: customerrds
        app.kubernetes.io/name: redis
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: customerrds
                    app.kubernetes.io/name: redis
                namespaces:
                  - customerrds
                topologyKey: kubernetes.io/hostname
              weight: 1
      containers:
        - args:
            - "# Backwards compatibility change\nif ! [[ -f /opt/bitnami/redis/etc/redis.conf\
              \ ]]; then\n    echo COPYING FILE\n    cp  /opt/bitnami/redis/etc/redis-default.conf\
              \ /opt/bitnami/redis/etc/redis.conf\nfi\npod_index=($(echo \"$POD_NAME\"\
              \ | tr \"-\" \"\\n\"))\npod_index=\"${pod_index[-1]}\"\nif [[ \"$pod_index\"\
              \ == \"0\" ]]; then\n  export REDIS_CLUSTER_CREATOR=\"yes\"\n  export\
              \ REDIS_CLUSTER_REPLICAS=\"1\"\nfi\n/opt/bitnami/scripts/redis-cluster/entrypoint.sh\
              \ /opt/bitnami/scripts/redis-cluster/run.sh\n"
          command:
            - /bin/bash
            - -c
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: REDIS_NODES
              value: 'redis-0.redis-headless redis-1.redis-headless redis-2.redis-headless
                redis-3.redis-headless redis-4.redis-headless redis-5.redis-headless '
            - name: ALLOW_EMPTY_PASSWORD
              value: 'yes'
            - name: REDIS_AOF_ENABLED
              value: 'yes'
            - name: REDIS_TLS_ENABLED
              value: 'no'
            - name: REDIS_PORT
              value: '6379'
          image: docker.io/bitnami/redis-cluster:6.2.7-debian-11-r9
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_liveness_local.sh 5
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 6
          name: redis
          ports:
            - containerPort: 6379
              name: tcp-redis
              protocol: TCP
            - containerPort: 16379
              name: tcp-redis-bus
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /scripts/ping_readiness_local.sh 1
            failureThreshold: 5
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 2
          resources: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /scripts
              name: scripts
            - mountPath: /bitnami/redis/data
              name: redis-data
            - mountPath: /opt/bitnami/redis/etc/redis-default.conf
              name: default-config
              subPath: redis-default.conf
            - mountPath: /opt/bitnami/redis/etc/
              name: redis-tmp-conf
      dnsPolicy: ClusterFirst
      enableServiceLinks: false
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccount: default
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 493
            name: redis-scripts
          name: scripts
        - configMap:
            defaultMode: 420
            name: redis-default
          name: default-config
        - emptyDir: {}
          name: redis-tmp-conf
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: customerrds
          app.kubernetes.io/name: redis
        name: redis-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
        volumeMode: Filesystem
      status:
        phase: Pending
